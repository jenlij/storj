// Code generated by protoc-gen-go.
// source: overlay.proto
// DO NOT EDIT!

/*
Package overlay is a generated protocol buffer package.

It is generated from these files:
	overlay.proto

It has these top-level messages:
	LookupRequest
	LookupResponse
	FindStorageNodesResponse
	FindStorageNodesRequest
	NodeAddress
	OverlayOptions
	NodeRep
	Node
	QueryRequest
	QueryResponse
*/
package overlay

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeTransport is an enum of possible transports for the overlay network
type NodeTransport int32

const (
	NodeTransport_TCP NodeTransport = 0
)

var NodeTransport_name = map[int32]string{
	0: "TCP",
}
var NodeTransport_value = map[string]int32{
	"TCP": 0,
}

func (x NodeTransport) String() string {
	return proto.EnumName(NodeTransport_name, int32(x))
}
func (NodeTransport) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// LookupRequest is is request message for the lookup rpc call
type LookupRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=nodeID" json:"nodeID,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LookupRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

// LookupResponse is is response message for the lookup rpc call
type LookupResponse struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LookupResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

// FindStorageNodesResponse is is response message for the FindStorageNodes rpc call
type FindStorageNodesResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *FindStorageNodesResponse) Reset()                    { *m = FindStorageNodesResponse{} }
func (m *FindStorageNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindStorageNodesResponse) ProtoMessage()               {}
func (*FindStorageNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FindStorageNodesResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// FindStorageNodesRequest is is request message for the FindStorageNodes rpc call
type FindStorageNodesRequest struct {
	ObjectSize     int64                     `protobuf:"varint,1,opt,name=objectSize" json:"objectSize,omitempty"`
	ContractLength *google_protobuf.Duration `protobuf:"bytes,2,opt,name=contractLength" json:"contractLength,omitempty"`
	Opts           *OverlayOptions           `protobuf:"bytes,3,opt,name=opts" json:"opts,omitempty"`
}

func (m *FindStorageNodesRequest) Reset()                    { *m = FindStorageNodesRequest{} }
func (m *FindStorageNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindStorageNodesRequest) ProtoMessage()               {}
func (*FindStorageNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FindStorageNodesRequest) GetObjectSize() int64 {
	if m != nil {
		return m.ObjectSize
	}
	return 0
}

func (m *FindStorageNodesRequest) GetContractLength() *google_protobuf.Duration {
	if m != nil {
		return m.ContractLength
	}
	return nil
}

func (m *FindStorageNodesRequest) GetOpts() *OverlayOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

// NodeAddress contains the information needed to communicate with a node on the network
type NodeAddress struct {
	Transport NodeTransport `protobuf:"varint,1,opt,name=transport,enum=overlay.NodeTransport" json:"transport,omitempty"`
	Address   string        `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *NodeAddress) Reset()                    { *m = NodeAddress{} }
func (m *NodeAddress) String() string            { return proto.CompactTextString(m) }
func (*NodeAddress) ProtoMessage()               {}
func (*NodeAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeAddress) GetTransport() NodeTransport {
	if m != nil {
		return m.Transport
	}
	return NodeTransport_TCP
}

func (m *NodeAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// OverlayOptions is a set of criteria that a node must meet to be considered for a storage opportunity
type OverlayOptions struct {
	MaxLatency    *google_protobuf.Duration `protobuf:"bytes,1,opt,name=maxLatency" json:"maxLatency,omitempty"`
	MinReputation *NodeRep                  `protobuf:"bytes,2,opt,name=minReputation" json:"minReputation,omitempty"`
	MinSpeedKbps  int64                     `protobuf:"varint,3,opt,name=minSpeedKbps" json:"minSpeedKbps,omitempty"`
	Limit         int64                     `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *OverlayOptions) Reset()                    { *m = OverlayOptions{} }
func (m *OverlayOptions) String() string            { return proto.CompactTextString(m) }
func (*OverlayOptions) ProtoMessage()               {}
func (*OverlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OverlayOptions) GetMaxLatency() *google_protobuf.Duration {
	if m != nil {
		return m.MaxLatency
	}
	return nil
}

func (m *OverlayOptions) GetMinReputation() *NodeRep {
	if m != nil {
		return m.MinReputation
	}
	return nil
}

func (m *OverlayOptions) GetMinSpeedKbps() int64 {
	if m != nil {
		return m.MinSpeedKbps
	}
	return 0
}

func (m *OverlayOptions) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// NodeRep is the reputation characteristics of a node
type NodeRep struct {
}

func (m *NodeRep) Reset()                    { *m = NodeRep{} }
func (m *NodeRep) String() string            { return proto.CompactTextString(m) }
func (*NodeRep) ProtoMessage()               {}
func (*NodeRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Node represents a node in the overlay network
type Node struct {
	Id      string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address *NodeAddress `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetAddress() *NodeAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type QueryRequest struct {
	Sender   *Node `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Receiver *Node `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryRequest) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *QueryRequest) GetReceiver() *Node {
	if m != nil {
		return m.Receiver
	}
	return nil
}

type QueryResponse struct {
	Sender   *Node   `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Response []*Node `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryResponse) GetSender() *Node {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *QueryResponse) GetResponse() []*Node {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*LookupRequest)(nil), "overlay.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "overlay.LookupResponse")
	proto.RegisterType((*FindStorageNodesResponse)(nil), "overlay.FindStorageNodesResponse")
	proto.RegisterType((*FindStorageNodesRequest)(nil), "overlay.FindStorageNodesRequest")
	proto.RegisterType((*NodeAddress)(nil), "overlay.NodeAddress")
	proto.RegisterType((*OverlayOptions)(nil), "overlay.OverlayOptions")
	proto.RegisterType((*NodeRep)(nil), "overlay.NodeRep")
	proto.RegisterType((*Node)(nil), "overlay.Node")
	proto.RegisterType((*QueryRequest)(nil), "overlay.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "overlay.QueryResponse")
	proto.RegisterEnum("overlay.NodeTransport", NodeTransport_name, NodeTransport_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Overlay service

type OverlayClient interface {
	// Lookup finds a nodes address from the network
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	// FindStorageNodes finds a list of nodes in the network that meet the specified request parameters
	FindStorageNodes(ctx context.Context, in *FindStorageNodesRequest, opts ...grpc.CallOption) (*FindStorageNodesResponse, error)
}

type overlayClient struct {
	cc *grpc.ClientConn
}

func NewOverlayClient(cc *grpc.ClientConn) OverlayClient {
	return &overlayClient{cc}
}

func (c *overlayClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/overlay.Overlay/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) FindStorageNodes(ctx context.Context, in *FindStorageNodesRequest, opts ...grpc.CallOption) (*FindStorageNodesResponse, error) {
	out := new(FindStorageNodesResponse)
	err := grpc.Invoke(ctx, "/overlay.Overlay/FindStorageNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Overlay service

type OverlayServer interface {
	// Lookup finds a nodes address from the network
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// FindStorageNodes finds a list of nodes in the network that meet the specified request parameters
	FindStorageNodes(context.Context, *FindStorageNodesRequest) (*FindStorageNodesResponse, error)
}

func RegisterOverlayServer(s *grpc.Server, srv OverlayServer) {
	s.RegisterService(&_Overlay_serviceDesc, srv)
}

func _Overlay_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overlay.Overlay/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_FindStorageNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStorageNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).FindStorageNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overlay.Overlay/FindStorageNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).FindStorageNodes(ctx, req.(*FindStorageNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Overlay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "overlay.Overlay",
	HandlerType: (*OverlayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _Overlay_Lookup_Handler,
		},
		{
			MethodName: "FindStorageNodes",
			Handler:    _Overlay_FindStorageNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overlay.proto",
}

// Client API for Nodes service

type NodesClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type nodesClient struct {
	cc *grpc.ClientConn
}

func NewNodesClient(cc *grpc.ClientConn) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/overlay.Nodes/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nodes service

type NodesServer interface {
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
}

func RegisterNodesServer(s *grpc.Server, srv NodesServer) {
	s.RegisterService(&_Nodes_serviceDesc, srv)
}

func _Nodes_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overlay.Nodes/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nodes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "overlay.Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Nodes_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overlay.proto",
}

func init() { proto.RegisterFile("overlay.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0xfd, 0xa4, 0xb7, 0x4b, 0x55, 0x59, 0xa3, 0x0d, 0xfd, 0x31, 0x75, 0x41, 0x88, 0x2f,
	0x29, 0x93, 0x3a, 0x34, 0x69, 0xbf, 0xa6, 0x89, 0x69, 0x12, 0xa2, 0x62, 0xe0, 0x4e, 0xe2, 0x17,
	0x12, 0x69, 0x73, 0x29, 0x81, 0xd6, 0x0e, 0xb6, 0x33, 0x51, 0xde, 0x85, 0x07, 0xe0, 0x21, 0x78,
	0x37, 0x14, 0xdb, 0x49, 0x9b, 0x76, 0x4c, 0xe2, 0x57, 0xe2, 0x7b, 0xce, 0xbd, 0x3e, 0x3e, 0x3e,
	0x06, 0x97, 0xdf, 0xa0, 0x58, 0x84, 0xab, 0x20, 0x11, 0x5c, 0x71, 0xd2, 0xb4, 0xcb, 0xc1, 0xc1,
	0x9c, 0xf3, 0xf9, 0x02, 0x8f, 0x74, 0x79, 0x9a, 0x7e, 0x3e, 0x8a, 0x52, 0x11, 0xaa, 0x98, 0x33,
	0x43, 0xf4, 0x9f, 0x80, 0x3b, 0xe6, 0xfc, 0x5b, 0x9a, 0x50, 0xfc, 0x9e, 0xa2, 0x54, 0xa4, 0x07,
	0x0d, 0xc6, 0x23, 0x7c, 0x7d, 0xe1, 0x39, 0x43, 0xe7, 0x69, 0x8b, 0xda, 0x95, 0x7f, 0x0c, 0x9d,
	0x9c, 0x28, 0x13, 0xce, 0x24, 0x92, 0x43, 0xa8, 0x65, 0x98, 0xe6, 0xb5, 0x47, 0x6e, 0x90, 0x2b,
	0x78, 0xcb, 0x23, 0xa4, 0x1a, 0xf2, 0xcf, 0xc0, 0xbb, 0x8c, 0x59, 0x34, 0x51, 0x5c, 0x84, 0x73,
	0xcc, 0x00, 0x59, 0xb4, 0x3f, 0x82, 0x7a, 0xc6, 0x91, 0x9e, 0x33, 0xac, 0xee, 0xf6, 0x1b, 0xcc,
	0xff, 0xed, 0x40, 0x7f, 0x77, 0x82, 0x51, 0x7a, 0x00, 0xc0, 0xa7, 0x5f, 0x71, 0xa6, 0x26, 0xf1,
	0x4f, 0xa3, 0xa2, 0x4a, 0x37, 0x2a, 0xe4, 0x1c, 0x3a, 0x33, 0xce, 0x94, 0x08, 0x67, 0x6a, 0x8c,
	0x6c, 0xae, 0xbe, 0x78, 0x15, 0xad, 0xf4, 0x61, 0x60, 0x3c, 0x09, 0x72, 0x4f, 0x82, 0x0b, 0xeb,
	0x09, 0xdd, 0x6a, 0x20, 0x2f, 0xa0, 0xc6, 0x13, 0x25, 0xbd, 0xaa, 0x6e, 0xec, 0x17, 0x12, 0xaf,
	0xcc, 0xf7, 0x2a, 0xc9, 0xba, 0x24, 0xd5, 0x24, 0xff, 0x23, 0xb4, 0x33, 0x7d, 0xe7, 0x51, 0x24,
	0x50, 0x4a, 0xf2, 0x12, 0x5a, 0x4a, 0x84, 0x4c, 0x26, 0x5c, 0x28, 0xad, 0xae, 0x33, 0xea, 0x95,
	0xce, 0x78, 0x9d, 0xa3, 0x74, 0x4d, 0x24, 0x1e, 0x34, 0x43, 0x33, 0x40, 0xab, 0x6d, 0xd1, 0x7c,
	0xe9, 0xff, 0x71, 0xa0, 0x53, 0xde, 0x97, 0x9c, 0x02, 0x2c, 0xc3, 0x1f, 0xe3, 0x50, 0x21, 0x9b,
	0xad, 0xec, 0x3d, 0xdc, 0x71, 0xba, 0x0d, 0x32, 0x39, 0x01, 0x77, 0x19, 0x33, 0x8a, 0x49, 0xaa,
	0x34, 0x68, 0xbd, 0xe9, 0x96, 0x6f, 0x01, 0x13, 0x5a, 0xa6, 0x11, 0x1f, 0xf6, 0x96, 0x31, 0x9b,
	0x24, 0x88, 0xd1, 0x9b, 0x69, 0x62, 0x9c, 0xa9, 0xd2, 0x52, 0x8d, 0xec, 0x43, 0x7d, 0x11, 0x2f,
	0x63, 0xe5, 0xd5, 0x34, 0x68, 0x16, 0x7e, 0x0b, 0x9a, 0x76, 0xa6, 0x7f, 0x09, 0xb5, 0xec, 0x97,
	0x74, 0xa0, 0x12, 0x47, 0x36, 0x67, 0x95, 0x38, 0x22, 0x41, 0xf9, 0xf0, 0xed, 0xd1, 0x7e, 0x49,
	0x8e, 0x75, 0x76, 0x6d, 0xc9, 0x27, 0xd8, 0x7b, 0x9f, 0xa2, 0x58, 0xe5, 0x89, 0x78, 0x0c, 0x0d,
	0x89, 0x2c, 0x42, 0x71, 0x7b, 0x26, 0x2d, 0x48, 0x9e, 0xc1, 0x7d, 0x81, 0x33, 0x8c, 0x6f, 0x50,
	0xd8, 0x7d, 0xb6, 0x88, 0x05, 0xec, 0x87, 0xe0, 0xda, 0x1d, 0x6c, 0x6a, 0xff, 0x67, 0x0b, 0xd3,
	0xe2, 0x55, 0x6e, 0xcb, 0x77, 0x01, 0x3f, 0xf7, 0xc0, 0x2d, 0xa5, 0x81, 0x34, 0xa1, 0x7a, 0xfd,
	0xea, 0x5d, 0xf7, 0xde, 0xe8, 0x97, 0x03, 0x4d, 0x7b, 0xe3, 0xe4, 0x14, 0x1a, 0xe6, 0xf9, 0x91,
	0x75, 0x88, 0x4a, 0x0f, 0x77, 0xd0, 0xdf, 0xa9, 0x5b, 0xc9, 0x1f, 0xa0, 0xbb, 0xfd, 0x84, 0xc8,
	0xb0, 0x20, 0xff, 0xe3, 0x75, 0x0d, 0x0e, 0xef, 0x60, 0x98, 0xc1, 0xa3, 0x33, 0xa8, 0x9b, 0x69,
	0x27, 0x50, 0xd7, 0x2e, 0x91, 0x07, 0x45, 0xd3, 0xe6, 0xbd, 0x0c, 0x7a, 0xdb, 0x65, 0x33, 0x60,
	0xda, 0xd0, 0x19, 0x3d, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x07, 0x3b, 0x06, 0x74, 0xbd, 0x04,
	0x00, 0x00,
}
